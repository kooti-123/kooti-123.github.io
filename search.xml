<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>游戏照片</title>
    <url>/2025/10/30/%E6%B8%B8%E6%88%8F%E7%85%A7%E7%89%87/</url>
    <content><![CDATA[<hr>
<hr>
<h3 id="杀戮尖塔"><a href="#杀戮尖塔" class="headerlink" title="杀戮尖塔"></a>杀戮尖塔</h3><p><img src="https://cdn.jsdelivr.net/gh/kooti-123/blog-pics@main/img/%E9%93%81%E7%94%B2%E6%88%98%E5%A3%AB.jpg" alt="铁甲战士"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kooti-123/blog-pics@main/img/%E9%9D%99%E9%BB%98%E7%8C%8E%E6%89%8B.jpg" alt="静默猎手"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kooti-123/blog-pics@main/img/%E6%95%85%E9%9A%9C%E6%9C%BA%E5%99%A8%E4%BA%BA.jpg" alt="故障机器人"></p>
<h3 id="全战三国"><a href="#全战三国" class="headerlink" title="全战三国"></a>全战三国</h3><p><img src="https://cdn.jsdelivr.net/gh/kooti-123/blog-pics@main/img/%E7%BB%9F%E4%B8%80%E5%A4%A9%E4%B8%8B%EF%BC%88%E4%B8%8A%EF%BC%89.png" alt="观者"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kooti-123/blog-pics@main/img/%E7%BB%9F%E4%B8%80%E5%A4%A9%E4%B8%8B%EF%BC%88%E4%B8%8B%EF%BC%89.png" alt="统一天下（下）"></p>
]]></content>
      <categories>
        <category>照片</category>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>照片</tag>
      </tags>
  </entry>
  <entry>
    <title>杀戮尖塔视频</title>
    <url>/2025/10/30/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="猎人："><a href="#猎人：" class="headerlink" title="猎人："></a>猎人：</h2><h3 id="猎人运转"><a href="#猎人运转" class="headerlink" title="猎人运转"></a>猎人运转</h3><iframe width="100%" height="400" src="https://www.youtube.com/embed/AdNJHmF4Tp4?si=wRY_NDwVwo5ebo-w?rel=0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>



]]></content>
      <categories>
        <category>视频</category>
        <category>游戏</category>
        <category>杀戮尖塔</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>杀戮尖塔</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法continue,break,return使用分析</title>
    <url>/2025/10/29/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95continue,break,return%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="leetcode491break使用错误"><a href="#leetcode491break使用错误" class="headerlink" title="leetcode491break使用错误:"></a>leetcode491break使用错误:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isValid</span>(path[n<span class="number">-1</span>],nums[i]))&#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">backTracking</span>(i<span class="number">+1</span>,nums);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//使用错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isValid</span>(path[n<span class="number">-1</span>],nums[i]))&#123;</span><br><span class="line">        path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">backTracking</span>(i<span class="number">+1</span>,nums);</span><br><span class="line">        path.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对去重continue的理解："><a href="#对去重continue的理解：" class="headerlink" title="对去重continue的理解："></a>对去重continue的理解：</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(i&gt;startIndex&amp;&amp;nums[i<span class="number">-1</span>]==nums[i])<span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode93错误使用return"><a href="#leetcode93错误使用return" class="headerlink" title="leetcode93错误使用return:"></a>leetcode93错误使用return:</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=startIndex;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i - startIndex + <span class="number">1</span> &gt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span> &gt; s.<span class="built_in">size</span>()) <span class="keyword">break</span>;</span><br><span class="line">    string segment = s.<span class="built_in">substr</span>(startIndex, i - startIndex + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isValid</span>(segment))&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(i<span class="number">+1</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        numIndex++;</span><br><span class="line">        <span class="built_in">backtracking</span>(i<span class="number">+2</span>,s,numIndex);</span><br><span class="line">        numIndex--;</span><br><span class="line">        s.<span class="built_in">erase</span>(i<span class="number">+1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正确代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=startIndex;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i - startIndex + <span class="number">1</span> &gt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span> &gt; s.<span class="built_in">size</span>()) <span class="keyword">break</span>;</span><br><span class="line">    string segment = s.<span class="built_in">substr</span>(startIndex, i - startIndex + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isValid</span>(segment))&#123;</span><br><span class="line">        s.<span class="built_in">insert</span>(i<span class="number">+1</span>,<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        numIndex++;</span><br><span class="line">        <span class="built_in">backtracking</span>(i<span class="number">+2</span>,s,numIndex);</span><br><span class="line">        numIndex--;</span><br><span class="line">        s.<span class="built_in">erase</span>(i<span class="number">+1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法，回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown格式</title>
    <url>/2025/10/28/Markdown%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>title: 我的文章标题<br>date: 2025-10-28<br>author: Me<br>tags: [Markdown, 教程]<br>categories: [笔记]<br>description: 文档简要描述</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>语法/格式</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Mermaid 语法总览</title>
    <url>/2025/10/28/Mermaid%20%E8%AF%AD%E6%B3%95%E6%80%BB%E8%A7%88/</url>
    <content><![CDATA[<hr>
<h2 id="1-流程图-Flowchart"><a href="#1-流程图-Flowchart" class="headerlink" title="1. 流程图 (Flowchart)"></a>1. 流程图 (Flowchart)</h2><pre class="mermaid">flowchart TD
    A[开始] --> B{判断条件}
    B -->|是| C[执行操作1]
    B -->|否| D[执行操作2]
    C --> E[结束]
    D --> E</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[开始] --&gt; B&#123;判断条件&#125;</span><br><span class="line">    B --&gt;|是| C[执行操作1]</span><br><span class="line">    B --&gt;|否| D[执行操作2]</span><br><span class="line">    C --&gt; E[结束]</span><br><span class="line">    D --&gt; E</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-时序图-Sequence-Diagram"><a href="#2-时序图-Sequence-Diagram" class="headerlink" title="2. 时序图 (Sequence Diagram)"></a>2. 时序图 (Sequence Diagram)</h2><pre class="mermaid">sequenceDiagram
    participant Alice
    participant Bob
    Alice->>Bob: 你好，Bob
    Bob-->>Alice: 你好，Alice
    Alice->>Bob: 你在做什么？</pre>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;&gt;Bob: 你好，Bob</span><br><span class="line">    Bob--&gt;&gt;Alice: 你好，Alice</span><br><span class="line">    Alice-&gt;&gt;Bob: 你在做什么？</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3-甘特图-Gantt-Chart"><a href="#3-甘特图-Gantt-Chart" class="headerlink" title="3. 甘特图 (Gantt Chart)"></a>3. 甘特图 (Gantt Chart)</h2><pre class="mermaid">gantt
    title 项目进度
    dateFormat  YYYY-MM-DD
    section 设计
    需求分析       :a1, 2025-10-01, 7d
    原型设计       :after a1, 5d
    section 开发
    前端开发       :2025-10-10, 10d
    后端开发       :2025-10-12, 12d</pre>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">    title 项目进度</span><br><span class="line">    dateFormat  YYYY-MM-DD</span><br><span class="line">    section 设计</span><br><span class="line">    需求分析       :a1, 2025-10-01, 7d</span><br><span class="line">    原型设计       :after a1, 5d</span><br><span class="line">    section 开发</span><br><span class="line">    前端开发       :2025-10-10, 10d</span><br><span class="line">    后端开发       :2025-10-12, 12d</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="4-类图-Class-Diagram"><a href="#4-类图-Class-Diagram" class="headerlink" title="4. 类图 (Class Diagram)"></a>4. 类图 (Class Diagram)</h2><pre class="mermaid">classDiagram
    class Animal {
        +String name
        +eat()
    }
    class Dog {
        +bark()
    }
    Animal <|-- Dog</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    class Animal &#123;</span><br><span class="line">        +String name</span><br><span class="line">        +eat()</span><br><span class="line">    &#125;</span><br><span class="line">    class Dog &#123;</span><br><span class="line">        +bark()</span><br><span class="line">    &#125;</span><br><span class="line">    Animal &lt;|-- Dog</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="5-状态图-State-Diagram"><a href="#5-状态图-State-Diagram" class="headerlink" title="5. 状态图 (State Diagram)"></a>5. 状态图 (State Diagram)</h2><pre class="mermaid">stateDiagram-v2
    [*] --> 空闲
    空闲 --> 工作
    工作 --> 空闲
    工作 --> 停止
    停止 --> [*]</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stateDiagram-v2</span><br><span class="line">    [*] --&gt; 空闲</span><br><span class="line">    空闲 --&gt; 工作</span><br><span class="line">    工作 --&gt; 空闲</span><br><span class="line">    工作 --&gt; 停止</span><br><span class="line">    停止 --&gt; [*]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="6-饼图-Pie-Chart"><a href="#6-饼图-Pie-Chart" class="headerlink" title="6. 饼图 (Pie Chart)"></a>6. 饼图 (Pie Chart)</h2><pre class="mermaid">pie
    title 网站流量来源
    "直接访问" : 45
    "搜索引擎" : 30
    "社交媒体" : 25</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title 网站流量来源</span><br><span class="line">    &quot;直接访问&quot; : 45</span><br><span class="line">    &quot;搜索引擎&quot; : 30</span><br><span class="line">    &quot;社交媒体&quot; : 25</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="7-用户旅程图-Journey-Diagram"><a href="#7-用户旅程图-Journey-Diagram" class="headerlink" title="7. 用户旅程图 (Journey Diagram)"></a>7. 用户旅程图 (Journey Diagram)</h2><pre class="mermaid">journey
    title 用户注册流程
    section 注册
      访问页面: 5: 用户
      填写表单: 4: 用户
      提交信息: 3: 用户
    section 验证
      邮箱验证: 2: 用户
      完成注册: 5: 用户</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journey</span><br><span class="line">    title 用户注册流程</span><br><span class="line">    section 注册</span><br><span class="line">      访问页面: 5: 用户</span><br><span class="line">      填写表单: 4: 用户</span><br><span class="line">      提交信息: 3: 用户</span><br><span class="line">    section 验证</span><br><span class="line">      邮箱验证: 2: 用户</span><br><span class="line">      完成注册: 5: 用户</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="8-ER-图-Entity-Relationship-Diagram"><a href="#8-ER-图-Entity-Relationship-Diagram" class="headerlink" title="8. ER 图 (Entity Relationship Diagram)"></a>8. ER 图 (Entity Relationship Diagram)</h2><pre class="mermaid">erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE_ITEM : contains
    CUSTOMER }|..|{ DELIVERY_ADDRESS : uses</pre>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">erDiagram</span><br><span class="line">    CUSTOMER ||--o&#123; ORDER : places</span><br><span class="line">    ORDER ||--|&#123; LINE_ITEM : contains</span><br><span class="line">    CUSTOMER &#125;|..|&#123; DELIVERY_ADDRESS : uses</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="9-Mermaid-小技巧"><a href="#9-Mermaid-小技巧" class="headerlink" title="9. Mermaid 小技巧"></a>9. Mermaid 小技巧</h2><ul>
<li>使用 <code>style</code> 自定义节点颜色和样式</li>
<li>箭头类型可选 <code>--&gt;</code>、<code>---</code>、<code>-.-&gt;</code> 等</li>
<li>节点形状：<code>[]</code> 矩形，<code>()</code> 椭圆，<code>&#123;&#125;</code> 决策</li>
<li>可以嵌套 subgraph</li>
</ul>
<hr>
<p><strong>提示</strong>  </p>
<ol>
<li>在 Typora 中确保已启用 Mermaid 渲染（通常在 <code>偏好设置 -&gt; Markdown -&gt; 渲染</code> 中）。  </li>
<li>所有 Mermaid 图都以 <code>mermaid</code> 包裹即可直接渲染。  </li>
<li>可在 Typora 中直接编辑文本和 Mermaid 代码，实时预览效果。</li>
</ol>
<p><strong>参考文档</strong><br><a href="https://mermaid-js.github.io/mermaid/#/">Mermaid 官方文档</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>语法/格式</category>
      </categories>
      <tags>
        <tag>Mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>基础回溯算法</title>
    <url>/2025/10/25/%E5%9F%BA%E7%A1%80%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式，回溯是递归的副产品，只要有递归就会有回溯。</p>
<p>回溯算法并不是什么高效的算法，实质上就是不断穷举出所有的可能性，其中可以加一些剪枝操作以提高效率，但本质上还是穷举，所以并不会快到那哪里去</p>
<span id="more"></span>

<hr>
<h3 id="回溯法解决的问题"><a href="#回溯法解决的问题" class="headerlink" title="回溯法解决的问题"></a><strong>回溯法解决的问题</strong></h3><p>回溯法，一般可以解决如下几种问题：</p>
<ul>
<li>组合问题：N个数里面按一定规则找出k个数的集合</li>
<li>切割问题：一个字符串按一定规则有几种切割方式</li>
<li>子集问题：一个N个数的集合里有多少符合条件的子集</li>
<li>排列问题：N个数按一定规则全排列，有几种排列方式</li>
<li>棋盘问题：N皇后，解数独等等</li>
</ul>
<p>回溯法的问题都可以抽象为树形结构来解决</p>
<hr>
<h3 id="回溯法的模板分为三部分："><a href="#回溯法的模板分为三部分：" class="headerlink" title="回溯法的模板分为三部分："></a><strong>回溯法的模板分为三部分：</strong></h3><p>1是函数传递的参数和返回值：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backTracking</span><span class="params">(参数)</span></span></span><br></pre></td></tr></table></figure>

<p>通常没有返回值，而在写回溯函数的时候，参数不需要那么快定下来，可以在写的过程中知道具体逻辑，然后要调用哪些参数就填写哪些参数</p>
<p>2是回溯的终止条件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">    存放结果;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历树形结构一定要有终止条件</p>
<p>3是回溯搜索的遍历：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(循环条件)&#123;</span><br><span class="line">	存放节点;</span><br><span class="line">	<span class="built_in">backTracking</span>(传递的参数);<span class="comment">//递归调用</span></span><br><span class="line">	回溯，撤销节点;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下就是回溯搜索的完整模板</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backTracking</span><span class="params">(参数)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(循环条件)&#123;</span><br><span class="line">        存放节点;</span><br><span class="line">        <span class="built_in">backTracking</span>(传递的参数);<span class="comment">//递归调用</span></span><br><span class="line">        回溯，撤销节点;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><em>下面举leetcode的几个题目为例</em></p>
<p>77，216</p>
<h3 id="leetcode77题为例"><a href="#leetcode77题为例" class="headerlink" title="leetcode77题为例:"></a><strong>leetcode77题为例</strong>:</h3><pre class="mermaid">graph TD

A[1，2，3，4]
A -->|取1| B[1]
A -->|取2| C[2]
A -->|取3| F[3]
B -->|取2| D[1，2]
B -->|取3| D1[1,3]
B -->|取4| D2[1,4]
C -->|取3| E[2,3]
C -->|取4| E1[2,4]
F -->|取4| G[3,4]</pre>

<p>向右遍历，取过的数不再重复取，用startIndex来记录，纵向通过递归遍历叶子节点，找到符合条件的放入res中储存</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;path;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backTracking</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()==k)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startIndex;i&lt;=n-(k-path.<span class="built_in">size</span>())<span class="number">+1</span>;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">backTracking</span>(n,k,i<span class="number">+1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">backTracking</span>(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>剪枝</strong>：</p>
<p>这里对可以剪枝的部分进行解释，因为最终要取到k个数，所以要<strong>保证列表中剩余元素（n-i） &gt;&#x3D; 所需需要的元素个数（k - path.size()）</strong>,也就是至多要从起始位置i&lt;&#x3D;n-（k - path.size()）+1开始遍历。至于+1可以举例，比如n&#x3D;5,那么就是1，2，3，4，5五个数，k取3，现在假如1已经在path.size()中，那么5-（3-1）&#x3D;3，再加上1就是i&lt;&#x3D;4，可以到4，也就是还可以入4，5两个数到path.size()，再往后连k&#x3D;3都凑不齐，直接剪枝掉。</p>
<hr>
<h3 id="leetcode216为例"><a href="#leetcode216为例" class="headerlink" title="leetcode216为例:"></a><strong>leetcode216为例</strong>:</h3><pre class="mermaid">graph TD

A[1，2，3，4，5，6，7，8，9]
A -->|取1| B[1]
A -->|取2| C[2]
A -->|取3| F[3]
A --> H[...]
B -->|取2| D[1，2]
B -->|取3| D1[1,3]
B -->|取4| D2[1,4]
B --> D3[...]
C -->|取3| E[2,3]
C -->|取4| E1[2,4]
C -->E2[...]
F -->|取4| G[3,4]
F --> G1[...]</pre>

<p>大概的图为此，横向遍历1-9数字，而纵向通过遍历k次找到相加为n的叶子节点，代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;path;</span><br><span class="line">    <span class="type">int</span> startIndex;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backTracking</span><span class="params">(<span class="type">int</span> startIndex,<span class="type">int</span> n,<span class="type">int</span> k,vector&lt;<span class="type">int</span>&gt;path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">accumulate</span>(path.<span class="built_in">begin</span>(),path.<span class="built_in">end</span>(),<span class="number">0</span>)==n&amp;&amp;path.<span class="built_in">size</span>()==k)&#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="built_in">size</span>()==k)&#123;</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=startIndex;i&lt;=<span class="number">9</span>-(k-path.<span class="built_in">size</span>())<span class="number">+1</span>;i++)&#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">accumulate</span>(path.<span class="built_in">begin</span>(),path.<span class="built_in">end</span>(),<span class="number">0</span>)&gt;n)&#123;</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">backTracking</span>(i<span class="number">+1</span>,n,k,path);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">backTracking</span>(<span class="number">1</span>,n,k,path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里的代码用了cpp的库函数accumulate()（时间复杂度o(n)）来计算，所以时间复杂度会更高点，可以用sum来代替（只有o(1)），这里的剪枝操作</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (sum &gt; targetSum) &#123; <span class="comment">// 剪枝操作</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>sum&gt;targetSum肯定就不符合了，那么也就没必要继续下去，直接剪枝，改善代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; result; <span class="comment">// 存放结果集</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path; <span class="comment">// 符合条件的结果</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(<span class="type">int</span> targetSum, <span class="type">int</span> k, <span class="type">int</span> sum, <span class="type">int</span> startIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; targetSum) &#123; <span class="comment">// 剪枝操作</span></span><br><span class="line">            <span class="keyword">return</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum == targetSum) result.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 如果path.size() == k 但sum != targetSum 直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= <span class="number">9</span> - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>; i++) &#123; <span class="comment">// 剪枝</span></span><br><span class="line">            sum += i; <span class="comment">// 处理</span></span><br><span class="line">            path.<span class="built_in">push_back</span>(i); <span class="comment">// 处理</span></span><br><span class="line">            <span class="built_in">backtracking</span>(targetSum, k, sum, i + <span class="number">1</span>); <span class="comment">// 注意i+1调整startIndex</span></span><br><span class="line">            sum -= i; <span class="comment">// 回溯</span></span><br><span class="line">            path.<span class="built_in">pop_back</span>(); <span class="comment">// 回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum3</span>(<span class="type">int</span> k, <span class="type">int</span> n) &#123;</span><br><span class="line">        result.<span class="built_in">clear</span>(); <span class="comment">// 可以不加</span></span><br><span class="line">        path.<span class="built_in">clear</span>();   <span class="comment">// 可以不加</span></span><br><span class="line">        <span class="built_in">backtracking</span>(n, k, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>部分参考思路和代码来自《代码随想录》</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>算法</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>入门动态规划(Dynamic Programming)问题</title>
    <url>/2025/10/21/%E5%85%A5%E9%97%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92(Dynamic%20Programming)%E9%97%AE%E9%A2%98%E2%80%94%E2%80%94leetcode%2070(%E7%88%AC%E6%A5%BC%E6%A2%AF)%E5%92%8C746(%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF)%E7%9A%84%E7%AE%80%E5%8D%95dp%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>首先动态规划和贪心的区别：贪心的核心就是从局部最优推到整体最优，和上一个状态没有关系，而动态规划顾名思义是动态的问题，比如经典的背包问题，每次装入时要考虑到背包的容量，而容量的大小通常由上一个装入背包的大小影响，所以贪心解决不了动态规划</p>
<span id="more"></span>

<h3 id="在动态规划问题上，我们要先考虑好5步："><a href="#在动态规划问题上，我们要先考虑好5步：" class="headerlink" title="在动态规划问题上，我们要先考虑好5步："></a>在动态规划问题上，我们要先考虑好5步：</h3><p>1：确定dp数组及下标含义</p>
<p>2：确定递推公式</p>
<p>3：dp数组的初始化</p>
<p>4：数组的遍历顺序</p>
<p>5：举例推导dp数组</p>
<h3 id="以leetcode70为例："><a href="#以leetcode70为例：" class="headerlink" title="以leetcode70为例："></a>以leetcode70为例：</h3><p>1，确定dp数组：dp[i]数组确定为到达i阶有多少种方案;</p>
<p>2，递推公式：我们到达第i阶是怎么到达的，只有两种方案，一个是从i-1走1步，另一个是从i-2走2步，所以到达第i阶就是这两个的总和相加，而到i-1的方案总数为dp[i-1],同理到达i-2的数量为dp[i-2]；所以推导出递推公式为dp[i]&#x3D;dp[i-1]+dp[i-2];</p>
<p>3，初始化：dp[1]&#x3D;1,dp[2]&#x3D;2;</p>
<p>4，数组遍历顺序：因为是由前两个的阶梯数推导出后第i个阶梯的方案，则从前往后遍历；</p>
<p>5，可以自己举例子 (n&#x3D;3有三种)</p>
<p>从而我们便可以得出代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="leetcode746："><a href="#leetcode746：" class="headerlink" title="leetcode746："></a>leetcode746：</h3><p>1，确定dp数组：dp[i]数组确定为到达i阶需要花费的总的钱数;</p>
<p>2，数组遍历顺序：这里我写这道题时先考虑的遍历顺序，由题可知，dp[n]&#x3D;0,也就是到达屋顶，所以我进行反向遍历，那么最后的第1层和第0层只要比较两个的最小值就可以知道从哪个点出发花费最小；</p>
<p>3，递推公式：爬到第i层我们的最小花费怎么求？同70我们也可以知道i的花费也由i-1和i-2决定，毕竟dp[i-1],dp[i-2]分别是到达第i-1层的最小花费和到达第i-2层的最小花费，所以我们找到其中的最小花费，则dp[i]&#x3D;cost[i]+min(dp[i-1],dp[i-2]);</p>
<p>4，初始化：dp[n]&#x3D;0,dp[n-1]&#x3D;cost[n-1];</p>
<p>5，举例子：略</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(cost.size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[cost.<span class="built_in">size</span>()] = <span class="number">0</span>;</span><br><span class="line">        dp[cost.<span class="built_in">size</span>() - <span class="number">1</span>] = cost[cost.<span class="built_in">size</span>() - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = cost.<span class="built_in">size</span>() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i] = cost[i] + <span class="built_in">min</span>(dp[i + <span class="number">1</span>], dp[i + <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(dp[<span class="number">0</span>], dp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>不过正向和方向遍历也没什么区别</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(cost.size() + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 默认第一步都是不花费体力的</span></span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= cost.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[cost.<span class="built_in">size</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>部分参考思路和代码来自《代码随想录》</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Code</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>dp</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
